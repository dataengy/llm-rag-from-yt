#!/usr/bin/env python3
"""Simple RAG demo using project dependencies."""

import sys
from pathlib import Path
from typing import List, Dict, Any

# Import common utilities
from utils import (
    setup_python_path, setup_logging, load_transcription_text,
    create_simple_chunks, simple_search, generate_simple_answer,
    interactive_qa_session, create_rag_metadata, print_session_header
)

# Setup Python path and logging
setup_python_path()
log_file = setup_logging('simple_rag_demo')

def create_simple_rag_qa():
    """Create a simple RAG Q&A system using our project structure."""
    
    log.info("Starting RAG Q&A system creation")
    print("üîß Creating simple RAG Q&A system...")
    
    # Load transcription
    log.debug("Loading transcription text")
    # Try local data first, fallback to main data
    local_transcript = Path("data/audio/transcript.txt")
    main_transcript = Path(r"../../data/audio/–í –º–µ—Å—è—Ü —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –±–æ–ª—å—à–µ 1–º–ª–Ω —Ä—É–±–ª–µ–πÔºü –ó–≤–µ–∑–¥–∞ ÔºÇ–†–µ—É—Ç–æ–≤ –¢–íÔºÇ —É –î—É–¥—è.real_transcript.txt")
    
    transcript_file = local_transcript if local_transcript.exists() else main_transcript
    transcript_text = load_transcription_text(transcript_file)
    
    if not transcript_text:
        log.error("No transcript text loaded, aborting RAG creation")
        return None
    
    log.info(f"Transcript loaded successfully: {len(transcript_text)} characters")
    
    # Test if our project's RAG components are available
    try:
        log.debug("Attempting to import project components")
        # Try to use project components
        from llm_rag_yt.config.settings import get_config
        from llm_rag_yt.text.processor import TextProcessor
        
        log.info("Project components imported successfully")
        print("‚úÖ Project components available")
        
        # Get configuration
        log.debug("Loading configuration")
        config = get_config()
        log.info(f"Config loaded - chunk_size: {config.chunk_size}, chunk_overlap: {config.chunk_overlap}")
        
        # Create text processor for chunking
        log.debug("Creating TextProcessor instance")
        text_processor = TextProcessor()
        
        # Process the transcript
        log.info("Starting transcript processing")
        print("üìù Processing transcript into chunks...")
        
        log.debug("Normalizing transcript text")
        normalized_text = text_processor.normalize_text(transcript_text)
        log.debug(f"Normalized text length: {len(normalized_text)} characters")
        
        log.debug(f"Splitting into chunks with size={config.chunk_size}, overlap={config.chunk_overlap}")
        processed_chunks = text_processor.split_into_chunks(
            normalized_text,
            chunk_size=config.chunk_size,
            overlap=config.chunk_overlap
        )
        
        log.info(f"Successfully created {len(processed_chunks)} text chunks")
        print(f"‚úÖ Created {len(processed_chunks)} text chunks")
        
        # Create a simple in-memory RAG system
        log.debug("Creating RAG data structure")
        rag_data = {
            "chunks": processed_chunks,
            "full_text": transcript_text,
            "metadata": create_rag_metadata(
                source="YouTube Shorts",
                title="–í –º–µ—Å—è—Ü —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –±–æ–ª—å—à–µ 1–º–ª–Ω —Ä—É–±–ª–µ–πÔºü –ó–≤–µ–∑–¥–∞ ÔºÇ–†–µ—É—Ç–æ–≤ –¢–íÔºÇ —É –î—É–¥—è",
                language="ru",
                chunk_count=len(processed_chunks),
                transcript_length=len(transcript_text)
            )
        }
        
        log.info("RAG data structure created successfully")
        log.debug(f"RAG data: {len(rag_data['chunks'])} chunks, metadata: {rag_data['metadata']}")
        return rag_data
        
    except ImportError as e:
        log.warning(f"Project components not available: {e}")
        log.info("Falling back to simple chunking")
        print(f"‚ùå Project components not available: {e}")
        
        # Fallback: simple chunking
        print("üîÑ Using fallback simple chunking...")
        chunks = create_simple_chunks(transcript_text, chunk_size=50)
        
        log.info(f"Created {len(chunks)} simple chunks using fallback method")
        print(f"‚úÖ Created {len(chunks)} simple chunks")
        
        rag_data = {
            "chunks": [chunk['text'] for chunk in chunks],  # Extract text for compatibility
            "full_text": transcript_text,
            "metadata": create_rag_metadata(
                source="YouTube Shorts",
                title="–í –º–µ—Å—è—Ü —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –±–æ–ª—å—à–µ 1–º–ª–Ω —Ä—É–±–ª–µ–πÔºü –ó–≤–µ–∑–¥–∞ ÔºÇ–†–µ—É—Ç–æ–≤ –¢–íÔºÇ —É –î—É–¥—è",
                language="ru",
                chunk_count=len(chunks),
                transcript_length=len(transcript_text),
                method="fallback_chunking"
            )
        }
        
        return rag_data

@log.catch
def main():
    """Main function for simple RAG demo."""
    log.info("=== MAIN FUNCTION STARTED ===")
    log.info(f"Script path: {Path(__file__)}")
    log.info(f"Current working directory: {Path.cwd()}")
    log.info(f"Python path: {sys.path[:3]}...")  # First 3 entries
    
    print_session_header("–ü–†–û–°–¢–ê–Ø RAG DEMO - –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò Q&A")
    
    # Create simple RAG data
    log.info("Creating RAG Q&A system")
    rag_data = create_simple_rag_qa()
    if not rag_data:
        log.error("Failed to create RAG data")
        print("‚ùå Failed to create RAG data")
        return 1
    
    log.info("RAG data created successfully")
    log.debug(f"RAG metadata: {rag_data['metadata']}")
    
    # Show some examples
    print("
üß™ –ü–†–ò–ú–ï–†–´ –í–û–ü–†–û–°–û–í:")
    example_questions = [
        "–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ—Ä–æ–π –≤–∏–¥–µ–æ?",
        "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ—Ä–æ–π?",
        "–ö–∞–∫ –æ–Ω –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–Ω—å–≥–∏?",
        "–ß—Ç–æ –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ —Ä–∞–±–æ—Ç–µ?"
    ]
    
    for q in example_questions:
        print(f"  ‚Ä¢ {q}")
    
    # Test one example
    print(f"
üß™ –¢–ï–°–¢–û–í–´–ô –í–û–ü–†–û–°:")
    test_question = "–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ—Ä–æ–π –≤–∏–¥–µ–æ?"
    print(f"–í–æ–ø—Ä–æ—Å: {test_question}")
    
    log.info(f"Running test question: '{test_question}'")
    relevant_chunks = simple_search(test_question, rag_data)
    answer = generate_simple_answer(test_question, relevant_chunks, rag_data["full_text"])
    print(f"–û—Ç–≤–µ—Ç: {answer}")
    
    log.info(f"Test question completed successfully")
    
    # Start interactive session
    log.info("Starting interactive Q&A session")
    interactive_qa_session(rag_data, simple_search, generate_simple_answer, "–ü–†–û–°–¢–ê–Ø –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –°–ï–°–°–ò–Ø –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í")
    
    log.info("=== MAIN FUNCTION COMPLETED ===")
    return 0

if __name__ == "__main__":
    sys.exit(main())
