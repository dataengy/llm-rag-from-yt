#!/usr/bin/env python3
"""Simple RAG demo using project dependencies."""

import os
import sys
from pathlib import Path
from typing import List, Dict, Any

from loguru import logger as log
from bash import bash

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "src"))

def load_transcription_text() -> str:
    """Load the transcription text from our created file."""
    bash(f"ls ../../data/audio/")
    transcript_file = Path("../../data/audio/–í –º–µ—Å—è—Ü —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –±–æ–ª—å—à–µ 1–º–ª–Ω —Ä—É–±–ª–µ–πÔºü –ó–≤–µ–∑–¥–∞ ÔºÇ–†–µ—É—Ç–æ–≤ –¢–íÔºÇ —É –î—É–¥—è.real_transcript.txt"
                           )
    
    if not transcript_file.exists():
        raise FileNotFoundError(f"‚ùå Transcript file not found: {transcript_file}")

    try:
        with transcript_file.open("r", encoding="utf-8") as f:
            content = f.read()
        
        # Extract just the text from timestamped segments
        lines = content.split('\n')
        text_segments = []
        
        for line in lines:
            line = line.strip()
            if line.startswith("[") and "]" in line:
                # Extract text after timestamp
                text_part = line.split("]", 1)[1].strip()
                if text_part:
                    text_segments.append(text_part)
        
        full_text = " ".join(text_segments)
        print(f"‚úÖ Loaded transcription: {len(text_segments)} segments, {len(full_text)} characters")
        return full_text
        
    except Exception as e:
        print(f"‚ùå Failed to load transcription: {e}")
        return ""

def create_simple_rag_qa():
    """Create a simple RAG Q&A system using our project structure."""
    
    print("üîß Creating simple RAG Q&A system...")
    
    # Load transcription
    transcript_text = load_transcription_text()
    if not transcript_text:
        return None
    
    # Test if our project's RAG components are available
    try:
        # Try to use project components
        from llm_rag_yt.config.settings import get_config
        from llm_rag_yt.text.processor import TextProcessor
        
        print("‚úÖ Project components available")
        
        # Get configuration
        config = get_config()
        
        # Create text processor for chunking
        text_processor = TextProcessor()
        
        # Process the transcript
        print("üìù Processing transcript into chunks...")
        normalized_text = text_processor.normalize_text(transcript_text)
        processed_chunks = text_processor.split_into_chunks(
            normalized_text,
            chunk_size=config.chunk_size,
            overlap=config.chunk_overlap
        )
        
        print(f"‚úÖ Created {len(processed_chunks)} text chunks")
        
        # Create a simple in-memory RAG system
        rag_data = {
            "chunks": processed_chunks,
            "full_text": transcript_text,
            "metadata": {
                "source": "YouTube Shorts",
                "title": "–í –º–µ—Å—è—Ü —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –±–æ–ª—å—à–µ 1–º–ª–Ω —Ä—É–±–ª–µ–πÔºü –ó–≤–µ–∑–¥–∞ ÔºÇ–†–µ—É—Ç–æ–≤ –¢–íÔºÇ —É –î—É–¥—è",
                "language": "ru",
                "chunk_count": len(processed_chunks)
            }
        }
        
        return rag_data
        
    except ImportError as e:
        print(f"‚ùå Project components not available: {e}")
        
        # Fallback: simple chunking
        print("üîÑ Using fallback simple chunking...")
        words = transcript_text.split()
        chunk_size = 50  # words per chunk
        chunks = []
        
        for i in range(0, len(words), chunk_size):
            chunk = " ".join(words[i:i + chunk_size])
            chunks.append(chunk)
        
        print(f"‚úÖ Created {len(chunks)} simple chunks")
        
        rag_data = {
            "chunks": chunks,
            "full_text": transcript_text,
            "metadata": {
                "source": "YouTube Shorts",
                "title": "–í –º–µ—Å—è—Ü —Ç—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –±–æ–ª—å—à–µ 1–º–ª–Ω —Ä—É–±–ª–µ–πÔºü –ó–≤–µ–∑–¥–∞ ÔºÇ–†–µ—É—Ç–æ–≤ –¢–íÔºÇ —É –î—É–¥—è",
                "language": "ru",
                "chunk_count": len(chunks)
            }
        }
        
        return rag_data

def simple_search(query: str, rag_data: Dict[str, Any]) -> List[str]:
    """Simple keyword-based search in chunks."""
    
    query_words = set(query.lower().split())
    
    # Score chunks by keyword overlap
    chunk_scores = []
    for i, chunk in enumerate(rag_data["chunks"]):
        chunk_words = set(chunk.lower().split())
        overlap = len(query_words.intersection(chunk_words))
        if overlap > 0:
            chunk_scores.append((overlap, i, chunk))
    
    # Sort by score and return top matches
    chunk_scores.sort(reverse=True, key=lambda x: x[0])
    
    # Return top 3 chunks
    top_chunks = []
    for score, idx, chunk in chunk_scores[:3]:
        top_chunks.append(chunk)
    
    return top_chunks

def generate_simple_answer(question: str, context_chunks: List[str], full_text: str) -> str:
    """Generate a simple answer based on context."""
    
    if not context_chunks:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å."
    
    # Simple keyword-based answer generation
    context = " ".join(context_chunks)
    
    # Common question patterns
    if any(word in question.lower() for word in ["—Å–∫–æ–ª—å–∫–æ", "–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç", "–∑–∞—Ä–∞–±–æ—Ç–æ–∫", "–¥–µ–Ω—å–≥–∏", "—Ä—É–±–ª–µ–π"]):
        if "–º–∏–ª–ª–∏–æ–Ω" in context.lower():
            return "–ü–æ —Å–ª–æ–≤–∞–º –≥–µ—Ä–æ—è –≤–∏–¥–µ–æ, –æ–Ω –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–æ–ª—å—à–µ –º–∏–ª–ª–∏–æ–Ω–∞ —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü. –û–Ω –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ - –∞–∫—Ç–µ—Ä—Å—Ç–≤–æ, —Å—Ü–µ–Ω–∞—Ä–Ω–æ–µ –¥–µ–ª–æ, –∫–æ–Ω—Ü–µ—Ä—Ç—ã, –±–ª–æ–≥–∏–Ω–≥, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ."
    
    if any(word in question.lower() for word in ["—á—Ç–æ", "—á–µ–º", "—Ä–∞–±–æ—Ç–∞", "–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"]):
        if "–∞–∫—Ç–µ—Ä" in context.lower() or "—Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç" in context.lower():
            return "–ì–µ—Ä–æ–π –≤–∏–¥–µ–æ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –æ–Ω —Ç—Ä—É–¥–æ–≥–æ–ª–∏–∫ –∏ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –∞–∫—Ç–µ—Ä—Å—Ç–≤–æ, —Å—Ü–µ–Ω–∞—Ä–Ω–æ–µ –¥–µ–ª–æ, –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –∫–æ–Ω—Ü–µ—Ä—Ç—ã, –±–ª–æ–≥–∏–Ω–≥, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–æ–µ."
    
    if any(word in question.lower() for word in ["–∫–∞–∫", "–∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º"]):
        return "–ì–µ—Ä–æ–π –≤–∏–¥–µ–æ –æ–±—ä—è—Å–Ω—è–µ—Ç, —á—Ç–æ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø—Ä–æ–±–ª–µ–º–∞ - —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, —á–µ–º –∏–º–µ–Ω–Ω–æ –æ–Ω –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Å–µ–≥–æ. –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –∞–∫—Ç–µ—Ä, —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç, –ø—Ä–æ–≤–æ–¥–∏—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –≤—ã—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç–∞—Ö, –≤–µ–¥–µ—Ç –±–ª–æ–≥ –∏ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏."
    
    # Default response with context
    return f"–ù–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ: {context[:200]}..."

def interactive_simple_qa(rag_data: Dict[str, Any]):
    """Run simple interactive Q&A session."""
    
    print("\n" + "="*60)
    print("ü§ñ –ü–†–û–°–¢–ê–Ø –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –°–ï–°–°–ò–Ø –í–û–ü–†–û–°–û–í –ò –û–¢–í–ï–¢–û–í")
    print("="*60)
    print(f"üìπ –í–∏–¥–µ–æ: {rag_data['metadata']['title']}")
    print(f"üìä –î–∞–Ω–Ω—ã–µ: {rag_data['metadata']['chunk_count']} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞")
    print("üí° –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –≤–∏–¥–µ–æ")
    print("‚å®Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ 'quit' –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("="*60)
    
    while True:
        try:
            question = input("\nü§î –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if question.lower() in ['quit', 'exit', '–≤—ã—Ö–æ–¥', 'q']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not question:
                print("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å")
                continue
            
            print(f"\nüîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è: '{question}'")
            
            # Search for relevant chunks
            relevant_chunks = simple_search(question, rag_data)
            
            # Generate answer
            answer = generate_simple_answer(question, relevant_chunks, rag_data["full_text"])
            
            print(f"\nüí¨ –û–¢–í–ï–¢:")
            print("-" * 40)
            print(answer)
            
            if relevant_chunks:
                print(f"\nüìö –ù–ê–ô–î–ï–ù–ù–´–ï –§–†–ê–ì–ú–ï–ù–¢–´ ({len(relevant_chunks)}):")
                print("-" * 40)
                for i, chunk in enumerate(relevant_chunks, 1):
                    preview = chunk[:100] + "..." if len(chunk) > 100 else chunk
                    print(f"{i}. {preview}")
            
        except KeyboardInterrupt:
            print("\n\nüëã –°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")

@log.catch
def main():
    """Main function for simple RAG demo."""
    print("üöÄ –ü–†–û–°–¢–ê–Ø RAG DEMO - –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò Q&A")
    print("="*50)
    
    # Create simple RAG data
    rag_data = create_simple_rag_qa()
    if not rag_data:
        print("‚ùå Failed to create RAG data")
        return 1
    
    # Show some examples
    print("\nüß™ –ü–†–ò–ú–ï–†–´ –í–û–ü–†–û–°–û–í:")
    example_questions = [
        "–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ—Ä–æ–π –≤–∏–¥–µ–æ?",
        "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ—Ä–æ–π?",
        "–ö–∞–∫ –æ–Ω –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–Ω—å–≥–∏?",
        "–ß—Ç–æ –æ–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ —Ä–∞–±–æ—Ç–µ?"
    ]
    
    for q in example_questions:
        print(f"  ‚Ä¢ {q}")
    
    # Test one example
    print(f"\nüß™ –¢–ï–°–¢–û–í–´–ô –í–û–ü–†–û–°:")
    test_question = "–°–∫–æ–ª—å–∫–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ—Ä–æ–π –≤–∏–¥–µ–æ?"
    print(f"–í–æ–ø—Ä–æ—Å: {test_question}")
    
    relevant_chunks = simple_search(test_question, rag_data)
    answer = generate_simple_answer(test_question, relevant_chunks, rag_data["full_text"])
    print(f"–û—Ç–≤–µ—Ç: {answer}")
    
    # Start interactive session
    interactive_simple_qa(rag_data)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())