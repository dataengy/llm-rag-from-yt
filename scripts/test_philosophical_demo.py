#!/usr/bin/env python3
"""Demo test script for philosophical podcast with fallback capabilities."""

import os
import sys
import time
from pathlib import Path
from typing import List, Dict, Any

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

class PhilosophicalRAGDemo:
    """Demo tester for philosophical podcast content with fallback mode."""

    def __init__(self):
        """Initialize the demo."""
        self.audio_file = "data/audio/–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –±–µ—Å–µ–¥–∞ ÔΩú –Æ—Ä–∏–π –í–∞—Ñ–∏–Ω ÔΩú –ø–æ–¥–∫–∞—Å—Ç.mp3"
        
        # Predefined test questions
        self.test_questions = {
            "–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã": [
                "–û —á–µ–º –≥–æ–≤–æ—Ä—è—Ç –≤ —ç—Ç–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –±–µ—Å–µ–¥–µ?",
                "–ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –≤ –ø–æ–¥–∫–∞—Å—Ç–µ?",
                "–ß—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –∏–¥–µ–µ–π —Ä–∞–∑–≥–æ–≤–æ—Ä–∞?",
                "–ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–¥–Ω–∏–º–∞—é—Ç—Å—è –≤ –±–µ—Å–µ–¥–µ?"
            ],
            "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –º–Ω–µ–Ω–∏—è": [
                "–ö—Ç–æ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –±–µ—Å–µ–¥–µ?",
                "–ö–∞–∫—É—é –ø–æ–∑–∏—Ü–∏—é –∑–∞–Ω–∏–º–∞–µ—Ç –Æ—Ä–∏–π –í–∞—Ñ–∏–Ω?",
                "–ö–∞–∫–∏–µ —Ä–∞–∑–Ω—ã–µ —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã?",
                "–ö–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –æ–±—Å—É–∂–¥–∞–µ–º—ã–º –≤–æ–ø—Ä–æ—Å–∞–º?"
            ],
            "–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏": [
                "–ö–∞–∫–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è?",
                "–ö–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–Ω—è—Ç–∏—è?",
                "–ö–∞–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏–¥–µ–π?",
                "–ö–∞–∫–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —à–∫–æ–ª—ã –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è?"
            ],
            "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤—ã–≤–æ–¥—ã": [
                "–ö–∞–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–∞—é—Ç—Å—è?",
                "–ö –∫–∞–∫–∏–º –≤—ã–≤–æ–¥–∞–º –ø—Ä–∏—Ö–æ–¥—è—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏?",
                "–ö–∞–∫ –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±—Å—É–∂–¥–∞–µ–º—ã–µ –∏–¥–µ–∏?",
                "–ß—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–ª—É—à–∞—Ç–µ–ª—è–º?"
            ]
        }

    def check_environment(self) -> Dict[str, bool]:
        """Check the current environment setup."""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        status = {
            "audio_file": False,
            "config": False,
            "openai_key": False,
            "ml_deps": False
        }
        
        # Check audio file
        audio_path = Path(self.audio_file)
        if audio_path.exists():
            print(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {audio_path.name}")
            print(f"üìä –†–∞–∑–º–µ—Ä: {audio_path.stat().st_size / 1024 / 1024:.1f} –ú–ë")
            status["audio_file"] = True
        else:
            print(f"‚ùå –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.audio_file}")
        
        # Check basic config
        try:
            from llm_rag_yt.config.settings import get_config
            config = get_config()
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            print(f"   –ú–æ–¥–µ–ª—å –ò–ò: {config.openai_model}")
            print(f"   –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: {config.chunk_size}")
            status["config"] = True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # Check OpenAI API key
        openai_key = os.getenv("OPENAI_API_KEY")
        if openai_key and openai_key != "your_openai_api_key_here":
            print("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            status["openai_key"] = True
        else:
            print("‚ö†Ô∏è  OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENAI_API_KEY –≤ —Ñ–∞–π–ª–µ .env")
        
        # Check ML dependencies
        try:
            from llm_rag_yt.embeddings.encoder import SENTENCE_TRANSFORMERS_AVAILABLE
            if SENTENCE_TRANSFORMERS_AVAILABLE:
                print("‚úÖ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
                status["ml_deps"] = True
            else:
                print("‚ö†Ô∏è  ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (fallback —Ä–µ–∂–∏–º)")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        
        return status

    def demo_rag_setup(self, status: Dict[str, bool]) -> bool:
        """Demonstrate RAG system setup."""
        print("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG —Å–∏—Å—Ç–µ–º—ã...")
        
        if not status["config"]:
            print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return False
        
        try:
            # Test text processing
            from llm_rag_yt.text.processor import TextProcessor
            
            processor = TextProcessor()
            sample_text = """
            –í —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –±–µ—Å–µ–¥–µ –Æ—Ä–∏–π –í–∞—Ñ–∏–Ω —Ä–∞–∑–º—ã—à–ª—è–µ—Ç –æ –ø—Ä–∏—Ä–æ–¥–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.
            –û–±—Å—É–∂–¥–∞—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã —Å–≤–æ–±–æ–¥—ã –≤–æ–ª–∏, —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∏–ª–µ–º–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏.
            –£—á–∞—Å—Ç–Ω–∏–∫–∏ –±–µ—Å–µ–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –∫ –≤—ã–≤–æ–¥—É –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è.
            """
            
            print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞...")
            normalized = processor.normalize_text(sample_text)
            chunks = processor.split_into_chunks(normalized, chunk_size=50, overlap=10)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(chunks)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤")
            print(f"   –ü—Ä–∏–º–µ—Ä —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞: '{chunks[0][:60]}...'")
            
            # Test vector storage (without embeddings)
            print("\nüíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞...")
            from llm_rag_yt.vectorstore.chroma import ChromaVectorStore
            
            vector_store = ChromaVectorStore()
            collection_info = vector_store.get_collection_info()
            print(f"‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω: {collection_info['name']}")
            print(f"   –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_info['count']}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RAG: {e}")
            return False

    def demo_questions(self):
        """Demonstrate question answering capabilities."""
        print("\nüí¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤")
        print("=" * 60)
        
        # Show predefined questions
        print("üìù –ì–æ—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
        for category, questions in self.test_questions.items():
            print(f"\nüîπ {category}:")
            for i, question in enumerate(questions, 1):
                print(f"   {i}. {question}")
        
        print("\nüéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:")
        print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        print("–ö–æ–º–∞–Ω–¥—ã: 'demo' - –¥–µ–º–æ –æ—Ç–≤–µ—Ç—ã, 'exit' - –≤—ã—Ö–æ–¥")
        
        while True:
            try:
                user_input = input("\nüí¨ –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
                
                if not user_input:
                    continue
                    
                if user_input.lower() == 'exit':
                    break
                elif user_input.lower() == 'demo':
                    self.show_demo_answers()
                    continue
                
                # Simple demo responses
                start_time = time.time()
                answer = self.generate_demo_answer(user_input)
                response_time = time.time() - start_time
                
                print(f"\nüí° –î–µ–º–æ –æ—Ç–≤–µ—Ç (–≤—Ä–µ–º—è: {response_time:.2f}—Å):")
                print("-" * 40)
                print(answer)
                print("\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏: [–¥–µ–º–æ-—Ä–µ–∂–∏–º, —Ä–µ–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã]")
                
            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def show_demo_answers(self):
        """Show demo answers for predefined questions."""
        demo_answers = {
            "–û —á–µ–º –≥–æ–≤–æ—Ä—è—Ç –≤ —ç—Ç–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –±–µ—Å–µ–¥–µ?": 
                "–í –±–µ—Å–µ–¥–µ –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø—Ä–∏—Ä–æ–¥—É —Å–æ–∑–Ω–∞–Ω–∏—è, —Å–≤–æ–±–æ–¥—É –≤–æ–ª–∏ –∏ –ø–æ–∏—Å–∫ —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏.",
            
            "–ö–∞–∫–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è?":
                "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é—Ç—Å—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª–∏–∑–º–∞, —ç—Ç–∏–∫–∏ –¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª–∏, –ø—Ä–æ–±–ª–µ–º—ã –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞ –∏ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–∏—Ä–æ–¥–µ –º–æ—Ä–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.",
            
            "–ö–∞–∫–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –¥–∞—é—Ç—Å—è?":
                "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—Ç –≤–∞–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º."
        }
        
        print("\nüé≠ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:")
        for question, answer in demo_answers.items():
            print(f"\n‚ùì {question}")
            print(f"üí° {answer}")

    def generate_demo_answer(self, question: str) -> str:
        """Generate a demo answer for any question."""
        # Simple keyword-based responses
        question_lower = question.lower()
        
        if any(word in question_lower for word in ["—é—Ä–∏–π", "–≤–∞—Ñ–∏–Ω", "—É—á–∞—Å—Ç–Ω–∏–∫"]):
            return "–Æ—Ä–∏–π –í–∞—Ñ–∏–Ω –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –±–µ—Å–µ–¥—ã, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ –≤–µ–¥—è –¥–∏–∞–ª–æ–≥ –æ –≤–∞–∂–Ω—ã—Ö —ç–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö."
        
        elif any(word in question_lower for word in ["—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", "–∫–æ–Ω—Ü–µ–ø—Ü–∏—è", "–∏–¥–µ—è"]):
            return "–í –±–µ—Å–µ–¥–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç—Å—è –∫–ª—é—á–µ–≤—ã–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏, –≤–∫–ª—é—á–∞—è –≤–æ–ø—Ä–æ—Å—ã —Å–æ–∑–Ω–∞–Ω–∏—è, —Å–≤–æ–±–æ–¥—ã –≤–æ–ª–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∏–ª–µ–º–º."
        
        elif any(word in question_lower for word in ["—Å–º—ã—Å–ª", "–∂–∏–∑–Ω—å", "—Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ"]):
            return "–û–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫ —Å–º—ã—Å–ª–∞ –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ, –≤–∞–∂–Ω–æ—Å—Ç—å —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ —Ä–æ–ª—å —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –∂–∏–∑–Ω–∏."
        
        elif any(word in question_lower for word in ["–ø—Ä–∞–∫—Ç–∏–∫–∞", "–ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ", "—Å–æ–≤–µ—Ç"]):
            return "–î–∞—é—Ç—Å—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è, –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ä–µ—à–µ–Ω–∏—è–º."
        
        else:
            return f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ '{question}'. –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –±–µ—Å–µ–¥—ã —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –æ–±—â–∏–º–∏ —Ç–µ–º–∞–º–∏ —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è, —ç—Ç–∏–∫–∏ –∏ –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–∏–Ω—ã."

    def show_setup_instructions(self):
        """Show setup instructions for full functionality."""
        print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï")
        print("=" * 50)
        print("–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ RAG —Å–∏—Å—Ç–µ–º—ã:")
        print()
        print("1. üîë –ù–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á:")
        print("   export OPENAI_API_KEY=your_actual_api_key")
        print("   # –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª .env")
        print()
        print("2. üß† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):")
        print("   uv sync --extra ml")
        print()
        print("3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç:")
        print("   uv run python scripts/test_philosophical_rag.py")

    def run(self):
        """Run the complete demo."""
        print("üé≠ –î–µ–º–æ RAG —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –±–µ—Å–µ–¥—ã")
        print("=" * 60)
        
        # Check environment
        status = self.check_environment()
        
        # Demo RAG setup
        rag_ready = self.demo_rag_setup(status)
        
        # Show capabilities
        print(f"\n‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
        print(f"  üéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª: {'‚úÖ' if status['audio_file'] else '‚ùå'}")
        print(f"  ‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'‚úÖ' if status['config'] else '‚ùå'}")
        print(f"  üîë OpenAI –∫–ª—é—á: {'‚úÖ' if status['openai_key'] else '‚ö†Ô∏è'}")
        print(f"  üß† ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'‚úÖ' if status['ml_deps'] else '‚ö†Ô∏è'}")
        print(f"  üîß RAG –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {'‚úÖ' if rag_ready else '‚ùå'}")
        
        if rag_ready:
            print("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")
            
            # Ask user what to do
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
            print("1. –î–µ–º–æ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã")
            print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ")
            print("3. –í—ã—Ö–æ–¥")
            
            try:
                choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1/2/3): ").strip()
                
                if choice == "1":
                    self.demo_questions()
                elif choice == "2":
                    self.show_setup_instructions()
                elif choice == "3":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                    self.show_setup_instructions()
                    
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        
        else:
            print("\n‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            self.show_setup_instructions()
        
        return True

def main():
    """Main function."""
    demo = PhilosophicalRAGDemo()
    success = demo.run()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()