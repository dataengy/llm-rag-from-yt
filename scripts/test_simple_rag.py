#!/usr/bin/env python3
"""Simple test script for philosophical podcast without ML dependencies."""

import os
import sys
from pathlib import Path

# Add src to path
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

def test_imports():
    """Test basic imports without ML dependencies."""
    print("üß™ Testing basic imports...")
    
    try:
        from llm_rag_yt._common.config.settings import get_config
        print("‚úÖ Config loaded")
        
        config = get_config()
        print(f"‚úÖ Config initialized: {config.openai_model}")
        
    except Exception as e:
        print(f"‚ùå Config error: {e}")
        return False
    
    try:
        from llm_rag_yt.text.processor import TextProcessor
        print("‚úÖ Text processor available")
        
        processor = TextProcessor()
        test_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        normalized = processor.normalize_text(test_text)
        print(f"‚úÖ Text normalization works: '{normalized[:50]}...'")
        
    except Exception as e:
        print(f"‚ùå Text processor error: {e}")
        return False
    
    return True

def test_philosophical_data():
    """Test if we have philosophical podcast data."""
    print("\nüé≠ Testing philosophical data...")
    
    audio_file = Path("data/audio/–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –±–µ—Å–µ–¥–∞ ÔΩú –Æ—Ä–∏–π –í–∞—Ñ–∏–Ω ÔΩú –ø–æ–¥–∫–∞—Å—Ç.mp3")
    if audio_file.exists():
        print(f"‚úÖ Audio file found: {audio_file}")
        size_mb = audio_file.stat().st_size / 1024 / 1024
        print(f"üìä Size: {size_mb:.1f} MB")
        return True
    else:
        print(f"‚ùå Audio file not found: {audio_file}")
        
        # Check what's in the data directory
        data_dir = Path("data")
        if data_dir.exists():
            print("üìÅ Available data files:")
            for item in data_dir.rglob("*"):
                if item.is_file():
                    print(f"  - {item}")
        else:
            print("‚ùå Data directory not found")
        
        return False

def simple_qa_demo():
    """Run a simple Q&A demo without RAG."""
    print("\nüí¨ Simple Q&A Demo (without RAG)")
    print("=" * 50)
    
    # Mock some philosophical content
    philosophical_content = """
    –í —ç—Ç–æ–π —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –±–µ—Å–µ–¥–µ –Æ—Ä–∏–π –í–∞—Ñ–∏–Ω –æ–±—Å—É–∂–¥–∞–µ—Ç –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã 
    –±—ã—Ç–∏—è –∏ —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏. –†–∞–∑–≥–æ–≤–æ—Ä –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç —Ç–µ–º—ã –æ –ø—Ä–∏—Ä–æ–¥–µ —Å–æ–∑–Ω–∞–Ω–∏—è,
    —Å–≤–æ–±–æ–¥–µ –≤–æ–ª–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∏–ª–µ–º–º–∞—Ö —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞.
    """
    
    questions = [
        "–û —á–µ–º –≥–æ–≤–æ—Ä–∏—Ç –Æ—Ä–∏–π –í–∞—Ñ–∏–Ω?",
        "–ö–∞–∫–∏–µ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è?",
        "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—Å—è –æ —Å–º—ã—Å–ª–µ –∂–∏–∑–Ω–∏?"
    ]
    
    print("üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã:")
    for i, question in enumerate(questions, 1):
        print(f"\n{i}. {question}")
        # Simple keyword matching
        answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω—É–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞."
        if "–Æ—Ä–∏–π" in question or "–≥–æ–≤–æ—Ä–∏—Ç" in question:
            answer = "–Æ—Ä–∏–π –í–∞—Ñ–∏–Ω –æ–±—Å—É–∂–¥–∞–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã—Ç–∏—è –∏ —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏."
        elif "—Ç–µ–º—ã" in question or "—Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–µ" in question:
            answer = "–û–±—Å—É–∂–¥–∞—é—Ç—Å—è —Ç–µ–º—ã —Å–æ–∑–Ω–∞–Ω–∏—è, —Å–≤–æ–±–æ–¥—ã –≤–æ–ª–∏ –∏ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∏–ª–µ–º–º."
        elif "—Å–º—ã—Å–ª" in question:
            answer = "–í –±–µ—Å–µ–¥–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–µ—Ç—Å—è —Ç–µ–º–∞ —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—â–µ—Å—Ç–≤–∞."
        
        print(f"üí° –û—Ç–≤–µ—Ç: {answer}")

def main():
    """Main function."""
    print("üé≠ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π RAG —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 60)
    
    # Test 1: Basic imports
    if not test_imports():
        print("\n‚ùå –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç")
        return 1
    
    # Test 2: Check philosophical data
    data_available = test_philosophical_data()
    
    # Test 3: Simple demo
    simple_qa_demo()
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print(f"  ‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã: OK")
    print(f"  {'‚úÖ' if data_available else '‚ùå'} –î–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Å—Ç–∞: {'OK' if data_available else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}")
    print(f"  ‚úÖ –ü—Ä–æ—Å—Ç–æ–µ Q&A: OK")
    
    if data_available:
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É –ø–æ–ª–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã!")
        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: uv run python scripts/test_philosophical_rag.py")
    else:
        print("\n‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª")
        print("üìÅ –ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª: data/audio/–§–∏–ª–æ—Å–æ—Ñ—Å–∫–∞—è –±–µ—Å–µ–¥–∞ ÔΩú –Æ—Ä–∏–π –í–∞—Ñ–∏–Ω ÔΩú –ø–æ–¥–∫–∞—Å—Ç.mp3")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())